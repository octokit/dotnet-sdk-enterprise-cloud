// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    /// <summary>
    /// Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
    /// </summary>
    public class RepositoryRuleCodeScanning : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RepositoryRuleCodeScanning_parameters? Parameters { get; set; }
#nullable restore
#else
        public RepositoryRuleCodeScanning_parameters Parameters { get; set; }
#endif
        /// <summary>The type property</summary>
        public RepositoryRuleCodeScanning_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="RepositoryRuleCodeScanning"/> and sets the default values.
        /// </summary>
        public RepositoryRuleCodeScanning()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RepositoryRuleCodeScanning"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RepositoryRuleCodeScanning CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RepositoryRuleCodeScanning();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"parameters", n => { Parameters = n.GetObjectValue<RepositoryRuleCodeScanning_parameters>(RepositoryRuleCodeScanning_parameters.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<RepositoryRuleCodeScanning_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<RepositoryRuleCodeScanning_parameters>("parameters", Parameters);
            writer.WriteEnumValue<RepositoryRuleCodeScanning_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class SecretScanningScanHistory : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backfill_scans property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.SecretScanningScan>? BackfillScans { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.SecretScanningScan> BackfillScans { get; set; }
#endif
        /// <summary>The custom_pattern_backfill_scans property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.SecretScanningScan>? CustomPatternBackfillScans { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.SecretScanningScan> CustomPatternBackfillScans { get; set; }
#endif
        /// <summary>The incremental_scans property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.SecretScanningScan>? IncrementalScans { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.SecretScanningScan> IncrementalScans { get; set; }
#endif
        /// <summary>The pattern_update_scans property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.SecretScanningScan>? PatternUpdateScans { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.SecretScanningScan> PatternUpdateScans { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.SecretScanningScanHistory"/> and sets the default values.
        /// </summary>
        public SecretScanningScanHistory()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.SecretScanningScanHistory"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.SecretScanningScanHistory CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.SecretScanningScanHistory();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backfill_scans", n => { BackfillScans = n.GetCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>(global::GitHub.Models.SecretScanningScan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "custom_pattern_backfill_scans", n => { CustomPatternBackfillScans = n.GetCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>(global::GitHub.Models.SecretScanningScan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "incremental_scans", n => { IncrementalScans = n.GetCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>(global::GitHub.Models.SecretScanningScan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "pattern_update_scans", n => { PatternUpdateScans = n.GetCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>(global::GitHub.Models.SecretScanningScan.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>("backfill_scans", BackfillScans);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>("custom_pattern_backfill_scans", CustomPatternBackfillScans);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>("incremental_scans", IncrementalScans);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.SecretScanningScan>("pattern_update_scans", PatternUpdateScans);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

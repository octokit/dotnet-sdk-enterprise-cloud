// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    /// <summary>
    /// Details of a deployment that is waiting for protection rules to pass
    /// </summary>
    public class PendingDeployment : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether the currently authenticated user can approve the deployment</summary>
        public bool? CurrentUserCanApprove { get; set; }
        /// <summary>The environment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PendingDeployment_environment? Environment { get; set; }
#nullable restore
#else
        public PendingDeployment_environment Environment { get; set; }
#endif
        /// <summary>The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PendingDeployment_reviewers>? Reviewers { get; set; }
#nullable restore
#else
        public List<PendingDeployment_reviewers> Reviewers { get; set; }
#endif
        /// <summary>The set duration of the wait timer</summary>
        public int? WaitTimer { get; set; }
        /// <summary>The time that the wait timer began.</summary>
        public DateTimeOffset? WaitTimerStartedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="PendingDeployment"/> and sets the default values.
        /// </summary>
        public PendingDeployment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PendingDeployment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PendingDeployment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PendingDeployment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"current_user_can_approve", n => { CurrentUserCanApprove = n.GetBoolValue(); } },
                {"environment", n => { Environment = n.GetObjectValue<PendingDeployment_environment>(PendingDeployment_environment.CreateFromDiscriminatorValue); } },
                {"reviewers", n => { Reviewers = n.GetCollectionOfObjectValues<PendingDeployment_reviewers>(PendingDeployment_reviewers.CreateFromDiscriminatorValue)?.ToList(); } },
                {"wait_timer", n => { WaitTimer = n.GetIntValue(); } },
                {"wait_timer_started_at", n => { WaitTimerStartedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("current_user_can_approve", CurrentUserCanApprove);
            writer.WriteObjectValue<PendingDeployment_environment>("environment", Environment);
            writer.WriteCollectionOfObjectValues<PendingDeployment_reviewers>("reviewers", Reviewers);
            writer.WriteIntValue("wait_timer", WaitTimer);
            writer.WriteDateTimeOffsetValue("wait_timer_started_at", WaitTimerStartedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class AuditLogEvent : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The name of the action that was performed, for example `user.login` or `repo.create`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>The active_was property</summary>
        public bool? ActiveWas { get; set; }
        /// <summary>The actor who performed the action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Actor { get; set; }
#nullable restore
#else
        public string Actor { get; set; }
#endif
        /// <summary>The id of the actor who performed the action.</summary>
        public int? ActorId { get; set; }
        /// <summary>The actor_location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.AuditLogEvent_actor_location? ActorLocation { get; set; }
#nullable restore
#else
        public global::GitHub.Models.AuditLogEvent_actor_location ActorLocation { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The username of the account being blocked.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BlockedUser { get; set; }
#nullable restore
#else
        public string BlockedUser { get; set; }
#endif
        /// <summary>The business property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Business { get; set; }
#nullable restore
#else
        public string Business { get; set; }
#endif
        /// <summary>The business_id property</summary>
        public int? BusinessId { get; set; }
        /// <summary>The config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.AuditLogEvent_config>? Config { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.AuditLogEvent_config> Config { get; set; }
#endif
        /// <summary>The config_was property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.AuditLogEvent_config_was>? ConfigWas { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.AuditLogEvent_config_was> ConfigWas { get; set; }
#endif
        /// <summary>The content_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentType { get; set; }
#nullable restore
#else
        public string ContentType { get; set; }
#endif
        /// <summary>The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).</summary>
        public int? CreatedAt { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.AuditLogEvent_data? Data { get; set; }
#nullable restore
#else
        public global::GitHub.Models.AuditLogEvent_data Data { get; set; }
#endif
        /// <summary>The deploy_key_fingerprint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeployKeyFingerprint { get; set; }
#nullable restore
#else
        public string DeployKeyFingerprint { get; set; }
#endif
        /// <summary>A unique identifier for an audit event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentId { get; set; }
#nullable restore
#else
        public string DocumentId { get; set; }
#endif
        /// <summary>The emoji property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Emoji { get; set; }
#nullable restore
#else
        public string Emoji { get; set; }
#endif
        /// <summary>The events property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.AuditLogEvent_events>? Events { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.AuditLogEvent_events> Events { get; set; }
#endif
        /// <summary>The events_were property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.AuditLogEvent_events_were>? EventsWere { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.AuditLogEvent_events_were> EventsWere { get; set; }
#endif
        /// <summary>The explanation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Explanation { get; set; }
#nullable restore
#else
        public string Explanation { get; set; }
#endif
        /// <summary>The fingerprint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>The hook_id property</summary>
        public int? HookId { get; set; }
        /// <summary>The limited_availability property</summary>
        public bool? LimitedAvailability { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The old_user property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OldUser { get; set; }
#nullable restore
#else
        public string OldUser { get; set; }
#endif
        /// <summary>The openssh_public_key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OpensshPublicKey { get; set; }
#nullable restore
#else
        public string OpensshPublicKey { get; set; }
#endif
        /// <summary>The operation_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperationType { get; set; }
#nullable restore
#else
        public string OperationType { get; set; }
#endif
        /// <summary>The org property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Org { get; set; }
#nullable restore
#else
        public string Org { get; set; }
#endif
        /// <summary>The org_id property</summary>
        public int? OrgId { get; set; }
        /// <summary>The previous_visibility property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousVisibility { get; set; }
#nullable restore
#else
        public string PreviousVisibility { get; set; }
#endif
        /// <summary>The read_only property</summary>
        public bool? ReadOnly { get; set; }
        /// <summary>The name of the repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Repo { get; set; }
#nullable restore
#else
        public string Repo { get; set; }
#endif
        /// <summary>The name of the repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Repository { get; set; }
#nullable restore
#else
        public string Repository { get; set; }
#endif
        /// <summary>The repository_public property</summary>
        public bool? RepositoryPublic { get; set; }
        /// <summary>The target_login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetLogin { get; set; }
#nullable restore
#else
        public string TargetLogin { get; set; }
#endif
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).</summary>
        public int? Timestamp { get; set; }
        /// <summary>The type of protocol (for example, HTTP or SSH) used to transfer Git data.</summary>
        public int? TransportProtocol { get; set; }
        /// <summary>A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransportProtocolName { get; set; }
#nullable restore
#else
        public string TransportProtocolName { get; set; }
#endif
        /// <summary>The user that was affected by the action performed (if available).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? User { get; set; }
#nullable restore
#else
        public string User { get; set; }
#endif
        /// <summary>The user_id property</summary>
        public int? UserId { get; set; }
        /// <summary>The repository visibility, for example `public` or `private`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Visibility { get; set; }
#nullable restore
#else
        public string Visibility { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.AuditLogEvent"/> and sets the default values.
        /// </summary>
        public AuditLogEvent()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.AuditLogEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.AuditLogEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.AuditLogEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetStringValue(); } },
                { "active", n => { Active = n.GetBoolValue(); } },
                { "active_was", n => { ActiveWas = n.GetBoolValue(); } },
                { "actor", n => { Actor = n.GetStringValue(); } },
                { "actor_id", n => { ActorId = n.GetIntValue(); } },
                { "actor_location", n => { ActorLocation = n.GetObjectValue<global::GitHub.Models.AuditLogEvent_actor_location>(global::GitHub.Models.AuditLogEvent_actor_location.CreateFromDiscriminatorValue); } },
                { "blocked_user", n => { BlockedUser = n.GetStringValue(); } },
                { "business", n => { Business = n.GetStringValue(); } },
                { "business_id", n => { BusinessId = n.GetIntValue(); } },
                { "config", n => { Config = n.GetCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_config>(global::GitHub.Models.AuditLogEvent_config.CreateFromDiscriminatorValue)?.AsList(); } },
                { "config_was", n => { ConfigWas = n.GetCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_config_was>(global::GitHub.Models.AuditLogEvent_config_was.CreateFromDiscriminatorValue)?.AsList(); } },
                { "content_type", n => { ContentType = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetIntValue(); } },
                { "data", n => { Data = n.GetObjectValue<global::GitHub.Models.AuditLogEvent_data>(global::GitHub.Models.AuditLogEvent_data.CreateFromDiscriminatorValue); } },
                { "deploy_key_fingerprint", n => { DeployKeyFingerprint = n.GetStringValue(); } },
                { "_document_id", n => { DocumentId = n.GetStringValue(); } },
                { "emoji", n => { Emoji = n.GetStringValue(); } },
                { "events", n => { Events = n.GetCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_events>(global::GitHub.Models.AuditLogEvent_events.CreateFromDiscriminatorValue)?.AsList(); } },
                { "events_were", n => { EventsWere = n.GetCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_events_were>(global::GitHub.Models.AuditLogEvent_events_were.CreateFromDiscriminatorValue)?.AsList(); } },
                { "explanation", n => { Explanation = n.GetStringValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "hook_id", n => { HookId = n.GetIntValue(); } },
                { "limited_availability", n => { LimitedAvailability = n.GetBoolValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "old_user", n => { OldUser = n.GetStringValue(); } },
                { "openssh_public_key", n => { OpensshPublicKey = n.GetStringValue(); } },
                { "operation_type", n => { OperationType = n.GetStringValue(); } },
                { "org", n => { Org = n.GetStringValue(); } },
                { "org_id", n => { OrgId = n.GetIntValue(); } },
                { "previous_visibility", n => { PreviousVisibility = n.GetStringValue(); } },
                { "read_only", n => { ReadOnly = n.GetBoolValue(); } },
                { "repo", n => { Repo = n.GetStringValue(); } },
                { "repository", n => { Repository = n.GetStringValue(); } },
                { "repository_public", n => { RepositoryPublic = n.GetBoolValue(); } },
                { "target_login", n => { TargetLogin = n.GetStringValue(); } },
                { "team", n => { Team = n.GetStringValue(); } },
                { "@timestamp", n => { Timestamp = n.GetIntValue(); } },
                { "transport_protocol", n => { TransportProtocol = n.GetIntValue(); } },
                { "transport_protocol_name", n => { TransportProtocolName = n.GetStringValue(); } },
                { "user", n => { User = n.GetStringValue(); } },
                { "user_id", n => { UserId = n.GetIntValue(); } },
                { "visibility", n => { Visibility = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("action", Action);
            writer.WriteBoolValue("active", Active);
            writer.WriteBoolValue("active_was", ActiveWas);
            writer.WriteStringValue("actor", Actor);
            writer.WriteIntValue("actor_id", ActorId);
            writer.WriteObjectValue<global::GitHub.Models.AuditLogEvent_actor_location>("actor_location", ActorLocation);
            writer.WriteStringValue("blocked_user", BlockedUser);
            writer.WriteStringValue("business", Business);
            writer.WriteIntValue("business_id", BusinessId);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_config>("config", Config);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_config_was>("config_was", ConfigWas);
            writer.WriteStringValue("content_type", ContentType);
            writer.WriteIntValue("created_at", CreatedAt);
            writer.WriteObjectValue<global::GitHub.Models.AuditLogEvent_data>("data", Data);
            writer.WriteStringValue("deploy_key_fingerprint", DeployKeyFingerprint);
            writer.WriteStringValue("_document_id", DocumentId);
            writer.WriteStringValue("emoji", Emoji);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_events>("events", Events);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.AuditLogEvent_events_were>("events_were", EventsWere);
            writer.WriteStringValue("explanation", Explanation);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteIntValue("hook_id", HookId);
            writer.WriteBoolValue("limited_availability", LimitedAvailability);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("old_user", OldUser);
            writer.WriteStringValue("openssh_public_key", OpensshPublicKey);
            writer.WriteStringValue("operation_type", OperationType);
            writer.WriteStringValue("org", Org);
            writer.WriteIntValue("org_id", OrgId);
            writer.WriteStringValue("previous_visibility", PreviousVisibility);
            writer.WriteBoolValue("read_only", ReadOnly);
            writer.WriteStringValue("repo", Repo);
            writer.WriteStringValue("repository", Repository);
            writer.WriteBoolValue("repository_public", RepositoryPublic);
            writer.WriteStringValue("target_login", TargetLogin);
            writer.WriteStringValue("team", Team);
            writer.WriteIntValue("@timestamp", Timestamp);
            writer.WriteIntValue("transport_protocol", TransportProtocol);
            writer.WriteStringValue("transport_protocol_name", TransportProtocolName);
            writer.WriteStringValue("user", User);
            writer.WriteIntValue("user_id", UserId);
            writer.WriteStringValue("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

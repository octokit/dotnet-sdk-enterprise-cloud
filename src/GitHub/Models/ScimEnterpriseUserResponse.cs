// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    #pragma warning disable CS1591
    public class ScimEnterpriseUserResponse : UserResponse, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Provisioned SCIM groups that the user is a member of.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ScimEnterpriseUserResponse_groups>? Groups { get; set; }
#nullable restore
#else
        public List<ScimEnterpriseUserResponse_groups> Groups { get; set; }
#endif
        /// <summary>The internally generated id for the user object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The metadata associated with the creation/updates to the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GitHub.Models.Meta? Meta { get; set; }
#nullable restore
#else
        public GitHub.Models.Meta Meta { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ScimEnterpriseUserResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new ScimEnterpriseUserResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ScimEnterpriseUserResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"groups", n => { Groups = n.GetCollectionOfObjectValues<ScimEnterpriseUserResponse_groups>(ScimEnterpriseUserResponse_groups.CreateFromDiscriminatorValue)?.ToList(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"meta", n => { Meta = n.GetObjectValue<GitHub.Models.Meta>(GitHub.Models.Meta.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<ScimEnterpriseUserResponse_groups>("groups", Groups);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<GitHub.Models.Meta>("meta", Meta);
        }
    }
}

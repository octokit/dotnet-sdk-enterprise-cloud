// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class DependencyGraphSpdxSbom_sbom : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An optional comment about the SPDX document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The creationInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.DependencyGraphSpdxSbom_sbom_creationInfo? CreationInfo { get; set; }
#nullable restore
#else
        public global::GitHub.Models.DependencyGraphSpdxSbom_sbom_creationInfo CreationInfo { get; set; }
#endif
        /// <summary>The license under which the SPDX document is licensed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataLicense { get; set; }
#nullable restore
#else
        public string DataLicense { get; set; }
#endif
        /// <summary>The namespace for the SPDX document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentNamespace { get; set; }
#nullable restore
#else
        public string DocumentNamespace { get; set; }
#endif
        /// <summary>The name of the SPDX document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The packages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_packages>? Packages { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_packages> Packages { get; set; }
#endif
        /// <summary>The relationships property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_relationships>? Relationships { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_relationships> Relationships { get; set; }
#endif
        /// <summary>The SPDX identifier for the SPDX document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SPDXID { get; set; }
#nullable restore
#else
        public string SPDXID { get; set; }
#endif
        /// <summary>The version of the SPDX specification that this document conforms to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpdxVersion { get; set; }
#nullable restore
#else
        public string SpdxVersion { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.DependencyGraphSpdxSbom_sbom"/> and sets the default values.
        /// </summary>
        public DependencyGraphSpdxSbom_sbom()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.DependencyGraphSpdxSbom_sbom"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.DependencyGraphSpdxSbom_sbom CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.DependencyGraphSpdxSbom_sbom();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "creationInfo", n => { CreationInfo = n.GetObjectValue<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_creationInfo>(global::GitHub.Models.DependencyGraphSpdxSbom_sbom_creationInfo.CreateFromDiscriminatorValue); } },
                { "dataLicense", n => { DataLicense = n.GetStringValue(); } },
                { "documentNamespace", n => { DocumentNamespace = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "packages", n => { Packages = n.GetCollectionOfObjectValues<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_packages>(global::GitHub.Models.DependencyGraphSpdxSbom_sbom_packages.CreateFromDiscriminatorValue)?.AsList(); } },
                { "relationships", n => { Relationships = n.GetCollectionOfObjectValues<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_relationships>(global::GitHub.Models.DependencyGraphSpdxSbom_sbom_relationships.CreateFromDiscriminatorValue)?.AsList(); } },
                { "SPDXID", n => { SPDXID = n.GetStringValue(); } },
                { "spdxVersion", n => { SpdxVersion = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("comment", Comment);
            writer.WriteObjectValue<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_creationInfo>("creationInfo", CreationInfo);
            writer.WriteStringValue("dataLicense", DataLicense);
            writer.WriteStringValue("documentNamespace", DocumentNamespace);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_packages>("packages", Packages);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.DependencyGraphSpdxSbom_sbom_relationships>("relationships", Relationships);
            writer.WriteStringValue("SPDXID", SPDXID);
            writer.WriteStringValue("spdxVersion", SpdxVersion);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

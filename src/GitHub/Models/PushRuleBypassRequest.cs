// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A bypass request made by a user asking to be exempted from a push rule in this repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class PushRuleBypassRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date and time the bypass request was created.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Data describing the push rules that are being requested to be bypassed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.PushRuleBypassRequest_data>? Data { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.PushRuleBypassRequest_data> Data { get; set; }
#endif
        /// <summary>The date and time the bypass request will expire.</summary>
        public DateTimeOffset? ExpiresAt { get; set; }
        /// <summary>The URL to view the bypass request in a browser.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlUrl { get; set; }
#nullable restore
#else
        public string HtmlUrl { get; set; }
#endif
        /// <summary>The unique identifier of the bypass request.</summary>
        public int? Id { get; set; }
        /// <summary>The number uniquely identifying the bypass request within its repository.</summary>
        public int? Number { get; set; }
        /// <summary>The organization associated with the repository the bypass request is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.PushRuleBypassRequest_organization? Organization { get; set; }
#nullable restore
#else
        public global::GitHub.Models.PushRuleBypassRequest_organization Organization { get; set; }
#endif
        /// <summary>The repository the bypass request is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.PushRuleBypassRequest_repository? Repository { get; set; }
#nullable restore
#else
        public global::GitHub.Models.PushRuleBypassRequest_repository Repository { get; set; }
#endif
        /// <summary>The user who requested the bypass.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.PushRuleBypassRequest_requester? Requester { get; set; }
#nullable restore
#else
        public global::GitHub.Models.PushRuleBypassRequest_requester Requester { get; set; }
#endif
        /// <summary>The comment the requester provided when creating the bypass request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequesterComment { get; set; }
#nullable restore
#else
        public string RequesterComment { get; set; }
#endif
        /// <summary>The type of request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestType { get; set; }
#nullable restore
#else
        public string RequestType { get; set; }
#endif
        /// <summary>The unique identifier for the request type of the bypass request. For example, a commit SHA.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceIdentifier { get; set; }
#nullable restore
#else
        public string ResourceIdentifier { get; set; }
#endif
        /// <summary>The responses to the bypass request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.BypassResponse>? Responses { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.BypassResponse> Responses { get; set; }
#endif
        /// <summary>The status of the bypass request.</summary>
        public global::GitHub.Models.PushRuleBypassRequest_status? Status { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.PushRuleBypassRequest"/> and sets the default values.
        /// </summary>
        public PushRuleBypassRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.PushRuleBypassRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.PushRuleBypassRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.PushRuleBypassRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "data", n => { Data = n.GetCollectionOfObjectValues<global::GitHub.Models.PushRuleBypassRequest_data>(global::GitHub.Models.PushRuleBypassRequest_data.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expires_at", n => { ExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "html_url", n => { HtmlUrl = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "number", n => { Number = n.GetIntValue(); } },
                { "organization", n => { Organization = n.GetObjectValue<global::GitHub.Models.PushRuleBypassRequest_organization>(global::GitHub.Models.PushRuleBypassRequest_organization.CreateFromDiscriminatorValue); } },
                { "repository", n => { Repository = n.GetObjectValue<global::GitHub.Models.PushRuleBypassRequest_repository>(global::GitHub.Models.PushRuleBypassRequest_repository.CreateFromDiscriminatorValue); } },
                { "request_type", n => { RequestType = n.GetStringValue(); } },
                { "requester", n => { Requester = n.GetObjectValue<global::GitHub.Models.PushRuleBypassRequest_requester>(global::GitHub.Models.PushRuleBypassRequest_requester.CreateFromDiscriminatorValue); } },
                { "requester_comment", n => { RequesterComment = n.GetStringValue(); } },
                { "resource_identifier", n => { ResourceIdentifier = n.GetStringValue(); } },
                { "responses", n => { Responses = n.GetCollectionOfObjectValues<global::GitHub.Models.BypassResponse>(global::GitHub.Models.BypassResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::GitHub.Models.PushRuleBypassRequest_status>(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.PushRuleBypassRequest_data>("data", Data);
            writer.WriteDateTimeOffsetValue("expires_at", ExpiresAt);
            writer.WriteStringValue("html_url", HtmlUrl);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("number", Number);
            writer.WriteObjectValue<global::GitHub.Models.PushRuleBypassRequest_organization>("organization", Organization);
            writer.WriteObjectValue<global::GitHub.Models.PushRuleBypassRequest_repository>("repository", Repository);
            writer.WriteObjectValue<global::GitHub.Models.PushRuleBypassRequest_requester>("requester", Requester);
            writer.WriteStringValue("requester_comment", RequesterComment);
            writer.WriteStringValue("request_type", RequestType);
            writer.WriteStringValue("resource_identifier", ResourceIdentifier);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.BypassResponse>("responses", Responses);
            writer.WriteEnumValue<global::GitHub.Models.PushRuleBypassRequest_status>("status", Status);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

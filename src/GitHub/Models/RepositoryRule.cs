// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/>, <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/>, <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/>, <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/>, <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/>, <see cref="global::GitHub.Models.RepositoryRuleCreation"/>, <see cref="global::GitHub.Models.RepositoryRuleDeletion"/>, <see cref="global::GitHub.Models.RepositoryRuleMember1"/>, <see cref="global::GitHub.Models.RepositoryRuleMember2"/>, <see cref="global::GitHub.Models.RepositoryRuleMember3"/>, <see cref="global::GitHub.Models.RepositoryRuleMember4"/>, <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/>, <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/>, <see cref="global::GitHub.Models.RepositoryRulePullRequest"/>, <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/>, <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/>, <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/>, <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/>, <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/>, <see cref="global::GitHub.Models.RepositoryRuleUpdate"/>, <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class RepositoryRule : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleBranchNamePattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleBranchNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleCodeScanning { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleCodeScanning { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleCommitAuthorEmailPattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleCommitAuthorEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleCommitMessagePattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleCommitMessagePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleCommitterEmailPattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleCommitterEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleCreation { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleCreation { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleDeletion { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleDeletion { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleMember1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleMember1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleMember2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleMember2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleMember3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleMember3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleMember4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleMember4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleMergeQueue { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleMergeQueue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleNonFastForward { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleNonFastForward { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRulePullRequest { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRulePullRequest { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleRepositoryRuleCodeScanning { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleRepositoryRuleCodeScanning { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleRepositoryRuleCodeScanning0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleRepositoryRuleCodeScanning0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleRepositoryRuleCodeScanning1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleRepositoryRuleCodeScanning1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleRepositoryRuleCodeScanning2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleRepositoryRuleCodeScanning2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleRepositoryRuleCodeScanning3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleRepositoryRuleCodeScanning3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCodeScanning? RepositoryRuleRepositoryRuleCodeScanning4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCodeScanning RepositoryRuleRepositoryRuleCodeScanning4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleRepositoryRuleMember1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleRepositoryRuleMember1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleRepositoryRuleMember10 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleRepositoryRuleMember10 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleRepositoryRuleMember11 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleRepositoryRuleMember11 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleRepositoryRuleMember12 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleRepositoryRuleMember12 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleRepositoryRuleMember13 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleRepositoryRuleMember13 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember1? RepositoryRuleRepositoryRuleMember14 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember1 RepositoryRuleRepositoryRuleMember14 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleRepositoryRuleMember2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleRepositoryRuleMember2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleRepositoryRuleMember20 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleRepositoryRuleMember20 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleRepositoryRuleMember21 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleRepositoryRuleMember21 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleRepositoryRuleMember22 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleRepositoryRuleMember22 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleRepositoryRuleMember23 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleRepositoryRuleMember23 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember2? RepositoryRuleRepositoryRuleMember24 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember2 RepositoryRuleRepositoryRuleMember24 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleRepositoryRuleMember3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleRepositoryRuleMember3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleRepositoryRuleMember30 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleRepositoryRuleMember30 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleRepositoryRuleMember31 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleRepositoryRuleMember31 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleRepositoryRuleMember32 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleRepositoryRuleMember32 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleRepositoryRuleMember33 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleRepositoryRuleMember33 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember3? RepositoryRuleRepositoryRuleMember34 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember3 RepositoryRuleRepositoryRuleMember34 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleRepositoryRuleMember4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleRepositoryRuleMember4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleRepositoryRuleMember40 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleRepositoryRuleMember40 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleRepositoryRuleMember41 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleRepositoryRuleMember41 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleRepositoryRuleMember42 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleRepositoryRuleMember42 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleRepositoryRuleMember43 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleRepositoryRuleMember43 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMember4? RepositoryRuleRepositoryRuleMember44 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMember4 RepositoryRuleRepositoryRuleMember44 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleRepositoryRuleMergeQueue { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleRepositoryRuleMergeQueue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleRepositoryRuleMergeQueue0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleRepositoryRuleMergeQueue0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleRepositoryRuleMergeQueue1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleRepositoryRuleMergeQueue1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleRepositoryRuleMergeQueue2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleRepositoryRuleMergeQueue2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleRepositoryRuleMergeQueue3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleRepositoryRuleMergeQueue3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleMergeQueue? RepositoryRuleRepositoryRuleMergeQueue4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleMergeQueue RepositoryRuleRepositoryRuleMergeQueue4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows0 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows1 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows2 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows3 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows4 { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRequiredDeployments { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredDeployments RepositoryRuleRequiredDeployments { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRequiredLinearHistory { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRequiredLinearHistory { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRequiredSignatures { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredSignatures RepositoryRuleRequiredSignatures { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRequiredStatusChecks { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRequiredStatusChecks { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleTagNamePattern? RepositoryRuleTagNamePattern { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleTagNamePattern RepositoryRuleTagNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleUpdate? RepositoryRuleUpdate { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleUpdate RepositoryRuleUpdate { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleWorkflows? RepositoryRuleWorkflows { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleWorkflows RepositoryRuleWorkflows { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.RepositoryRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.RepositoryRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new global::GitHub.Models.RepositoryRule();
            if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleBranchNamePattern = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCodeScanning = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCommitAuthorEmailPattern = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCommitMessagePattern = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCommitterEmailPattern = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCreation = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleDeletion = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMember1 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMember2 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMember3 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMember4 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMergeQueue = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleNonFastForward = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRulePullRequest = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleBranchNamePattern = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleBranchNamePattern0 = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleBranchNamePattern1 = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleBranchNamePattern2 = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleBranchNamePattern3 = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleBranchNamePattern4 = new global::GitHub.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCodeScanning = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCodeScanning0 = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCodeScanning1 = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCodeScanning2 = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCodeScanning3 = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCodeScanning4 = new global::GitHub.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3 = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4 = new global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern0 = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern1 = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern2 = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern3 = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern4 = new global::GitHub.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern0 = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern1 = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern2 = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern3 = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern4 = new global::GitHub.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCreation = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCreation0 = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCreation1 = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCreation2 = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCreation3 = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleCreation4 = new global::GitHub.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleDeletion = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleDeletion0 = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleDeletion1 = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleDeletion2 = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleDeletion3 = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleDeletion4 = new global::GitHub.Models.RepositoryRuleDeletion();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember1 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember10 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember11 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember12 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember13 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember14 = new global::GitHub.Models.RepositoryRuleMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember2 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember20 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember21 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember22 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember23 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember24 = new global::GitHub.Models.RepositoryRuleMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember3 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember30 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember31 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember32 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember33 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember34 = new global::GitHub.Models.RepositoryRuleMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember4 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember40 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember41 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember42 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember43 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMember44 = new global::GitHub.Models.RepositoryRuleMember4();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMergeQueue = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMergeQueue0 = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMergeQueue1 = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMergeQueue2 = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMergeQueue3 = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleMergeQueue4 = new global::GitHub.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleNonFastForward = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleNonFastForward0 = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleNonFastForward1 = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleNonFastForward2 = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleNonFastForward3 = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleNonFastForward4 = new global::GitHub.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRulePullRequest = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRulePullRequest0 = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRulePullRequest1 = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRulePullRequest2 = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRulePullRequest3 = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRulePullRequest4 = new global::GitHub.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredDeployments = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredDeployments0 = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredDeployments1 = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredDeployments2 = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredDeployments3 = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredDeployments4 = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory0 = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory1 = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory2 = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory3 = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory4 = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredSignatures = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredSignatures0 = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredSignatures1 = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredSignatures2 = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredSignatures3 = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredSignatures4 = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks0 = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks1 = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks2 = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks3 = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks4 = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleTagNamePattern = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleTagNamePattern0 = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleTagNamePattern1 = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleTagNamePattern2 = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleTagNamePattern3 = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleTagNamePattern4 = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleUpdate = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleUpdate0 = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleUpdate1 = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleUpdate2 = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleUpdate3 = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleUpdate4 = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleWorkflows = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleWorkflows0 = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleWorkflows1 = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleWorkflows2 = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleWorkflows3 = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRepositoryRuleWorkflows4 = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredDeployments = new global::GitHub.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredLinearHistory = new global::GitHub.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredSignatures = new global::GitHub.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredStatusChecks = new global::GitHub.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleTagNamePattern = new global::GitHub.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleUpdate = new global::GitHub.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleWorkflows = new global::GitHub.Models.RepositoryRuleWorkflows();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(RepositoryRuleBranchNamePattern != null)
            {
                return RepositoryRuleBranchNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCodeScanning != null)
            {
                return RepositoryRuleCodeScanning.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitAuthorEmailPattern != null)
            {
                return RepositoryRuleCommitAuthorEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitMessagePattern != null)
            {
                return RepositoryRuleCommitMessagePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitterEmailPattern != null)
            {
                return RepositoryRuleCommitterEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCreation != null)
            {
                return RepositoryRuleCreation.GetFieldDeserializers();
            }
            else if(RepositoryRuleDeletion != null)
            {
                return RepositoryRuleDeletion.GetFieldDeserializers();
            }
            else if(RepositoryRuleMember1 != null)
            {
                return RepositoryRuleMember1.GetFieldDeserializers();
            }
            else if(RepositoryRuleMember2 != null)
            {
                return RepositoryRuleMember2.GetFieldDeserializers();
            }
            else if(RepositoryRuleMember3 != null)
            {
                return RepositoryRuleMember3.GetFieldDeserializers();
            }
            else if(RepositoryRuleMember4 != null)
            {
                return RepositoryRuleMember4.GetFieldDeserializers();
            }
            else if(RepositoryRuleMergeQueue != null)
            {
                return RepositoryRuleMergeQueue.GetFieldDeserializers();
            }
            else if(RepositoryRuleNonFastForward != null)
            {
                return RepositoryRuleNonFastForward.GetFieldDeserializers();
            }
            else if(RepositoryRulePullRequest != null)
            {
                return RepositoryRulePullRequest.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern != null)
            {
                return RepositoryRuleRepositoryRuleBranchNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern0 != null)
            {
                return RepositoryRuleRepositoryRuleBranchNamePattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern1 != null)
            {
                return RepositoryRuleRepositoryRuleBranchNamePattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern2 != null)
            {
                return RepositoryRuleRepositoryRuleBranchNamePattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern3 != null)
            {
                return RepositoryRuleRepositoryRuleBranchNamePattern3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern4 != null)
            {
                return RepositoryRuleRepositoryRuleBranchNamePattern4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning != null)
            {
                return RepositoryRuleRepositoryRuleCodeScanning.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning0 != null)
            {
                return RepositoryRuleRepositoryRuleCodeScanning0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning1 != null)
            {
                return RepositoryRuleRepositoryRuleCodeScanning1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning2 != null)
            {
                return RepositoryRuleRepositoryRuleCodeScanning2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning3 != null)
            {
                return RepositoryRuleRepositoryRuleCodeScanning3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning4 != null)
            {
                return RepositoryRuleRepositoryRuleCodeScanning4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern != null)
            {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 != null)
            {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 != null)
            {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 != null)
            {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3 != null)
            {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4 != null)
            {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern != null)
            {
                return RepositoryRuleRepositoryRuleCommitMessagePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern0 != null)
            {
                return RepositoryRuleRepositoryRuleCommitMessagePattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern1 != null)
            {
                return RepositoryRuleRepositoryRuleCommitMessagePattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern2 != null)
            {
                return RepositoryRuleRepositoryRuleCommitMessagePattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern3 != null)
            {
                return RepositoryRuleRepositoryRuleCommitMessagePattern3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern4 != null)
            {
                return RepositoryRuleRepositoryRuleCommitMessagePattern4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern != null)
            {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern0 != null)
            {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern1 != null)
            {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern2 != null)
            {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern3 != null)
            {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern4 != null)
            {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation != null)
            {
                return RepositoryRuleRepositoryRuleCreation.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation0 != null)
            {
                return RepositoryRuleRepositoryRuleCreation0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation1 != null)
            {
                return RepositoryRuleRepositoryRuleCreation1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation2 != null)
            {
                return RepositoryRuleRepositoryRuleCreation2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation3 != null)
            {
                return RepositoryRuleRepositoryRuleCreation3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation4 != null)
            {
                return RepositoryRuleRepositoryRuleCreation4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion != null)
            {
                return RepositoryRuleRepositoryRuleDeletion.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion0 != null)
            {
                return RepositoryRuleRepositoryRuleDeletion0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion1 != null)
            {
                return RepositoryRuleRepositoryRuleDeletion1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion2 != null)
            {
                return RepositoryRuleRepositoryRuleDeletion2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion3 != null)
            {
                return RepositoryRuleRepositoryRuleDeletion3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion4 != null)
            {
                return RepositoryRuleRepositoryRuleDeletion4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember1 != null)
            {
                return RepositoryRuleRepositoryRuleMember1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember10 != null)
            {
                return RepositoryRuleRepositoryRuleMember10.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember11 != null)
            {
                return RepositoryRuleRepositoryRuleMember11.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember12 != null)
            {
                return RepositoryRuleRepositoryRuleMember12.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember13 != null)
            {
                return RepositoryRuleRepositoryRuleMember13.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember14 != null)
            {
                return RepositoryRuleRepositoryRuleMember14.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember2 != null)
            {
                return RepositoryRuleRepositoryRuleMember2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember20 != null)
            {
                return RepositoryRuleRepositoryRuleMember20.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember21 != null)
            {
                return RepositoryRuleRepositoryRuleMember21.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember22 != null)
            {
                return RepositoryRuleRepositoryRuleMember22.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember23 != null)
            {
                return RepositoryRuleRepositoryRuleMember23.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember24 != null)
            {
                return RepositoryRuleRepositoryRuleMember24.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember3 != null)
            {
                return RepositoryRuleRepositoryRuleMember3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember30 != null)
            {
                return RepositoryRuleRepositoryRuleMember30.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember31 != null)
            {
                return RepositoryRuleRepositoryRuleMember31.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember32 != null)
            {
                return RepositoryRuleRepositoryRuleMember32.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember33 != null)
            {
                return RepositoryRuleRepositoryRuleMember33.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember34 != null)
            {
                return RepositoryRuleRepositoryRuleMember34.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember4 != null)
            {
                return RepositoryRuleRepositoryRuleMember4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember40 != null)
            {
                return RepositoryRuleRepositoryRuleMember40.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember41 != null)
            {
                return RepositoryRuleRepositoryRuleMember41.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember42 != null)
            {
                return RepositoryRuleRepositoryRuleMember42.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember43 != null)
            {
                return RepositoryRuleRepositoryRuleMember43.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMember44 != null)
            {
                return RepositoryRuleRepositoryRuleMember44.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue != null)
            {
                return RepositoryRuleRepositoryRuleMergeQueue.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue0 != null)
            {
                return RepositoryRuleRepositoryRuleMergeQueue0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue1 != null)
            {
                return RepositoryRuleRepositoryRuleMergeQueue1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue2 != null)
            {
                return RepositoryRuleRepositoryRuleMergeQueue2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue3 != null)
            {
                return RepositoryRuleRepositoryRuleMergeQueue3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue4 != null)
            {
                return RepositoryRuleRepositoryRuleMergeQueue4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward != null)
            {
                return RepositoryRuleRepositoryRuleNonFastForward.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward0 != null)
            {
                return RepositoryRuleRepositoryRuleNonFastForward0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward1 != null)
            {
                return RepositoryRuleRepositoryRuleNonFastForward1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward2 != null)
            {
                return RepositoryRuleRepositoryRuleNonFastForward2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward3 != null)
            {
                return RepositoryRuleRepositoryRuleNonFastForward3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward4 != null)
            {
                return RepositoryRuleRepositoryRuleNonFastForward4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest != null)
            {
                return RepositoryRuleRepositoryRulePullRequest.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest0 != null)
            {
                return RepositoryRuleRepositoryRulePullRequest0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest1 != null)
            {
                return RepositoryRuleRepositoryRulePullRequest1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest2 != null)
            {
                return RepositoryRuleRepositoryRulePullRequest2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest3 != null)
            {
                return RepositoryRuleRepositoryRulePullRequest3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest4 != null)
            {
                return RepositoryRuleRepositoryRulePullRequest4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments != null)
            {
                return RepositoryRuleRepositoryRuleRequiredDeployments.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments0 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredDeployments0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments1 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredDeployments1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments2 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredDeployments2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments3 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredDeployments3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments4 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredDeployments4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory != null)
            {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory0 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory1 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory2 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory3 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory4 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures != null)
            {
                return RepositoryRuleRepositoryRuleRequiredSignatures.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures0 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredSignatures0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures1 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredSignatures1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures2 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredSignatures2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures3 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredSignatures3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures4 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredSignatures4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks != null)
            {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks0 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks1 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks2 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks3 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks4 != null)
            {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern != null)
            {
                return RepositoryRuleRepositoryRuleTagNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern0 != null)
            {
                return RepositoryRuleRepositoryRuleTagNamePattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern1 != null)
            {
                return RepositoryRuleRepositoryRuleTagNamePattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern2 != null)
            {
                return RepositoryRuleRepositoryRuleTagNamePattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern3 != null)
            {
                return RepositoryRuleRepositoryRuleTagNamePattern3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern4 != null)
            {
                return RepositoryRuleRepositoryRuleTagNamePattern4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate != null)
            {
                return RepositoryRuleRepositoryRuleUpdate.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate0 != null)
            {
                return RepositoryRuleRepositoryRuleUpdate0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate1 != null)
            {
                return RepositoryRuleRepositoryRuleUpdate1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate2 != null)
            {
                return RepositoryRuleRepositoryRuleUpdate2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate3 != null)
            {
                return RepositoryRuleRepositoryRuleUpdate3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate4 != null)
            {
                return RepositoryRuleRepositoryRuleUpdate4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows != null)
            {
                return RepositoryRuleRepositoryRuleWorkflows.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows0 != null)
            {
                return RepositoryRuleRepositoryRuleWorkflows0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows1 != null)
            {
                return RepositoryRuleRepositoryRuleWorkflows1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows2 != null)
            {
                return RepositoryRuleRepositoryRuleWorkflows2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows3 != null)
            {
                return RepositoryRuleRepositoryRuleWorkflows3.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows4 != null)
            {
                return RepositoryRuleRepositoryRuleWorkflows4.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredDeployments != null)
            {
                return RepositoryRuleRequiredDeployments.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredLinearHistory != null)
            {
                return RepositoryRuleRequiredLinearHistory.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredSignatures != null)
            {
                return RepositoryRuleRequiredSignatures.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredStatusChecks != null)
            {
                return RepositoryRuleRequiredStatusChecks.GetFieldDeserializers();
            }
            else if(RepositoryRuleTagNamePattern != null)
            {
                return RepositoryRuleTagNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleUpdate != null)
            {
                return RepositoryRuleUpdate.GetFieldDeserializers();
            }
            else if(RepositoryRuleWorkflows != null)
            {
                return RepositoryRuleWorkflows.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(RepositoryRuleBranchNamePattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleBranchNamePattern);
            }
            else if(RepositoryRuleCodeScanning != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleCodeScanning);
            }
            else if(RepositoryRuleCommitAuthorEmailPattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleCommitAuthorEmailPattern);
            }
            else if(RepositoryRuleCommitMessagePattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleCommitMessagePattern);
            }
            else if(RepositoryRuleCommitterEmailPattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleCommitterEmailPattern);
            }
            else if(RepositoryRuleCreation != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleCreation);
            }
            else if(RepositoryRuleDeletion != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleDeletion);
            }
            else if(RepositoryRuleMember1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleMember1);
            }
            else if(RepositoryRuleMember2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleMember2);
            }
            else if(RepositoryRuleMember3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleMember3);
            }
            else if(RepositoryRuleMember4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleMember4);
            }
            else if(RepositoryRuleMergeQueue != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleMergeQueue);
            }
            else if(RepositoryRuleNonFastForward != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleNonFastForward);
            }
            else if(RepositoryRulePullRequest != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRulePullRequest);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern0);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern1);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern2);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern3);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern4);
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleRepositoryRuleCodeScanning);
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleRepositoryRuleCodeScanning0);
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleRepositoryRuleCodeScanning1);
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleRepositoryRuleCodeScanning2);
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleRepositoryRuleCodeScanning3);
            }
            else if(RepositoryRuleRepositoryRuleCodeScanning4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleRepositoryRuleCodeScanning4);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern3);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern4);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern0);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern1);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern2);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern3);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern4);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern0);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern1);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern2);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern3);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern4);
            }
            else if(RepositoryRuleRepositoryRuleCreation != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation);
            }
            else if(RepositoryRuleRepositoryRuleCreation0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation0);
            }
            else if(RepositoryRuleRepositoryRuleCreation1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation1);
            }
            else if(RepositoryRuleRepositoryRuleCreation2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation2);
            }
            else if(RepositoryRuleRepositoryRuleCreation3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation3);
            }
            else if(RepositoryRuleRepositoryRuleCreation4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation4);
            }
            else if(RepositoryRuleRepositoryRuleDeletion != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion);
            }
            else if(RepositoryRuleRepositoryRuleDeletion0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion0);
            }
            else if(RepositoryRuleRepositoryRuleDeletion1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion1);
            }
            else if(RepositoryRuleRepositoryRuleDeletion2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion2);
            }
            else if(RepositoryRuleRepositoryRuleDeletion3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion3);
            }
            else if(RepositoryRuleRepositoryRuleDeletion4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion4);
            }
            else if(RepositoryRuleRepositoryRuleMember1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleRepositoryRuleMember1);
            }
            else if(RepositoryRuleRepositoryRuleMember10 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleRepositoryRuleMember10);
            }
            else if(RepositoryRuleRepositoryRuleMember11 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleRepositoryRuleMember11);
            }
            else if(RepositoryRuleRepositoryRuleMember12 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleRepositoryRuleMember12);
            }
            else if(RepositoryRuleRepositoryRuleMember13 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleRepositoryRuleMember13);
            }
            else if(RepositoryRuleRepositoryRuleMember14 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember1>(null, RepositoryRuleRepositoryRuleMember14);
            }
            else if(RepositoryRuleRepositoryRuleMember2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleRepositoryRuleMember2);
            }
            else if(RepositoryRuleRepositoryRuleMember20 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleRepositoryRuleMember20);
            }
            else if(RepositoryRuleRepositoryRuleMember21 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleRepositoryRuleMember21);
            }
            else if(RepositoryRuleRepositoryRuleMember22 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleRepositoryRuleMember22);
            }
            else if(RepositoryRuleRepositoryRuleMember23 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleRepositoryRuleMember23);
            }
            else if(RepositoryRuleRepositoryRuleMember24 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember2>(null, RepositoryRuleRepositoryRuleMember24);
            }
            else if(RepositoryRuleRepositoryRuleMember3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleRepositoryRuleMember3);
            }
            else if(RepositoryRuleRepositoryRuleMember30 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleRepositoryRuleMember30);
            }
            else if(RepositoryRuleRepositoryRuleMember31 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleRepositoryRuleMember31);
            }
            else if(RepositoryRuleRepositoryRuleMember32 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleRepositoryRuleMember32);
            }
            else if(RepositoryRuleRepositoryRuleMember33 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleRepositoryRuleMember33);
            }
            else if(RepositoryRuleRepositoryRuleMember34 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember3>(null, RepositoryRuleRepositoryRuleMember34);
            }
            else if(RepositoryRuleRepositoryRuleMember4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleRepositoryRuleMember4);
            }
            else if(RepositoryRuleRepositoryRuleMember40 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleRepositoryRuleMember40);
            }
            else if(RepositoryRuleRepositoryRuleMember41 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleRepositoryRuleMember41);
            }
            else if(RepositoryRuleRepositoryRuleMember42 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleRepositoryRuleMember42);
            }
            else if(RepositoryRuleRepositoryRuleMember43 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleRepositoryRuleMember43);
            }
            else if(RepositoryRuleRepositoryRuleMember44 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMember4>(null, RepositoryRuleRepositoryRuleMember44);
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleRepositoryRuleMergeQueue);
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleRepositoryRuleMergeQueue0);
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleRepositoryRuleMergeQueue1);
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleRepositoryRuleMergeQueue2);
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleRepositoryRuleMergeQueue3);
            }
            else if(RepositoryRuleRepositoryRuleMergeQueue4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleRepositoryRuleMergeQueue4);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward0);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward1);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward2);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward3);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward4);
            }
            else if(RepositoryRuleRepositoryRulePullRequest != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest);
            }
            else if(RepositoryRuleRepositoryRulePullRequest0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest0);
            }
            else if(RepositoryRuleRepositoryRulePullRequest1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest1);
            }
            else if(RepositoryRuleRepositoryRulePullRequest2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest2);
            }
            else if(RepositoryRuleRepositoryRulePullRequest3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest3);
            }
            else if(RepositoryRuleRepositoryRulePullRequest4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest4);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments3);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments4);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory3);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory4);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures3);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures4);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks3);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks4);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern0);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern1);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern2);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern3);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern4);
            }
            else if(RepositoryRuleRepositoryRuleUpdate != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate);
            }
            else if(RepositoryRuleRepositoryRuleUpdate0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate0);
            }
            else if(RepositoryRuleRepositoryRuleUpdate1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate1);
            }
            else if(RepositoryRuleRepositoryRuleUpdate2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate2);
            }
            else if(RepositoryRuleRepositoryRuleUpdate3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate3);
            }
            else if(RepositoryRuleRepositoryRuleUpdate4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate4);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows0 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows0);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows1 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows1);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows2 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows2);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows3 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows3);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows4 != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows4);
            }
            else if(RepositoryRuleRequiredDeployments != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRequiredDeployments);
            }
            else if(RepositoryRuleRequiredLinearHistory != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRequiredLinearHistory);
            }
            else if(RepositoryRuleRequiredSignatures != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRequiredSignatures);
            }
            else if(RepositoryRuleRequiredStatusChecks != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRequiredStatusChecks);
            }
            else if(RepositoryRuleTagNamePattern != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleTagNamePattern);
            }
            else if(RepositoryRuleUpdate != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleUpdate>(null, RepositoryRuleUpdate);
            }
            else if(RepositoryRuleWorkflows != null)
            {
                writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleWorkflows>(null, RepositoryRuleWorkflows);
            }
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    /// <summary>
    /// Packages metrics that are included in the Server Statistics payload/export from GHES
    /// </summary>
    public class ServerStatisticsPackages : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The details of the package ecosystems that are enabled in a GHES installation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ServerStatisticsPackages_ecosystems>? Ecosystems { get; set; }
#nullable restore
#else
        public List<ServerStatisticsPackages_ecosystems> Ecosystems { get; set; }
#endif
        /// <summary>Whether GitHub Packages is enabled globally in a GHES installation</summary>
        public bool? RegistryEnabled { get; set; }
        /// <summary>Whether a beta registry is enabled in a GHES installation</summary>
        public bool? RegistryV2Enabled { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ServerStatisticsPackages"/> and sets the default values.
        /// </summary>
        public ServerStatisticsPackages()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ServerStatisticsPackages"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ServerStatisticsPackages CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ServerStatisticsPackages();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"ecosystems", n => { Ecosystems = n.GetCollectionOfObjectValues<ServerStatisticsPackages_ecosystems>(ServerStatisticsPackages_ecosystems.CreateFromDiscriminatorValue)?.ToList(); } },
                {"registry_enabled", n => { RegistryEnabled = n.GetBoolValue(); } },
                {"registry_v2_enabled", n => { RegistryV2Enabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ServerStatisticsPackages_ecosystems>("ecosystems", Ecosystems);
            writer.WriteBoolValue("registry_enabled", RegistryEnabled);
            writer.WriteBoolValue("registry_v2_enabled", RegistryV2Enabled);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

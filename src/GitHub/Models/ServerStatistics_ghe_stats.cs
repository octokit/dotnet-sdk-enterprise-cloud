// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class ServerStatistics_ghe_stats : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The comments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_comments? Comments { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_comments Comments { get; set; }
#endif
        /// <summary>The gists property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_gists? Gists { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_gists Gists { get; set; }
#endif
        /// <summary>The hooks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_hooks? Hooks { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_hooks Hooks { get; set; }
#endif
        /// <summary>The issues property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_issues? Issues { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_issues Issues { get; set; }
#endif
        /// <summary>The milestones property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_milestones? Milestones { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_milestones Milestones { get; set; }
#endif
        /// <summary>The orgs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_orgs? Orgs { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_orgs Orgs { get; set; }
#endif
        /// <summary>The pages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_pages? Pages { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_pages Pages { get; set; }
#endif
        /// <summary>The pulls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_pulls? Pulls { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_pulls Pulls { get; set; }
#endif
        /// <summary>The repos property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_repos? Repos { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_repos Repos { get; set; }
#endif
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ServerStatistics_ghe_stats_users? Users { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ServerStatistics_ghe_stats_users Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.ServerStatistics_ghe_stats"/> and sets the default values.
        /// </summary>
        public ServerStatistics_ghe_stats()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.ServerStatistics_ghe_stats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.ServerStatistics_ghe_stats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.ServerStatistics_ghe_stats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comments", n => { Comments = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_comments>(global::GitHub.Models.ServerStatistics_ghe_stats_comments.CreateFromDiscriminatorValue); } },
                { "gists", n => { Gists = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_gists>(global::GitHub.Models.ServerStatistics_ghe_stats_gists.CreateFromDiscriminatorValue); } },
                { "hooks", n => { Hooks = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_hooks>(global::GitHub.Models.ServerStatistics_ghe_stats_hooks.CreateFromDiscriminatorValue); } },
                { "issues", n => { Issues = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_issues>(global::GitHub.Models.ServerStatistics_ghe_stats_issues.CreateFromDiscriminatorValue); } },
                { "milestones", n => { Milestones = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_milestones>(global::GitHub.Models.ServerStatistics_ghe_stats_milestones.CreateFromDiscriminatorValue); } },
                { "orgs", n => { Orgs = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_orgs>(global::GitHub.Models.ServerStatistics_ghe_stats_orgs.CreateFromDiscriminatorValue); } },
                { "pages", n => { Pages = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_pages>(global::GitHub.Models.ServerStatistics_ghe_stats_pages.CreateFromDiscriminatorValue); } },
                { "pulls", n => { Pulls = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_pulls>(global::GitHub.Models.ServerStatistics_ghe_stats_pulls.CreateFromDiscriminatorValue); } },
                { "repos", n => { Repos = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_repos>(global::GitHub.Models.ServerStatistics_ghe_stats_repos.CreateFromDiscriminatorValue); } },
                { "users", n => { Users = n.GetObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_users>(global::GitHub.Models.ServerStatistics_ghe_stats_users.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_comments>("comments", Comments);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_gists>("gists", Gists);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_hooks>("hooks", Hooks);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_issues>("issues", Issues);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_milestones>("milestones", Milestones);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_orgs>("orgs", Orgs);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_pages>("pages", Pages);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_pulls>("pulls", Pulls);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_repos>("repos", Repos);
            writer.WriteObjectValue<global::GitHub.Models.ServerStatistics_ghe_stats_users>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

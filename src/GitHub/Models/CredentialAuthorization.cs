// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Credential Authorization
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class CredentialAuthorization : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The expiry for the token. This will only be present when the credential is a token.</summary>
        public DateTimeOffset? AuthorizedCredentialExpiresAt { get; set; }
        /// <summary>The ID of the underlying token that was authorized by the user. This will remain unchanged across authorizations of the token.</summary>
        public int? AuthorizedCredentialId { get; set; }
        /// <summary>The note given to the token. This will only be present when the credential is a token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizedCredentialNote { get; set; }
#nullable restore
#else
        public string AuthorizedCredentialNote { get; set; }
#endif
        /// <summary>The title given to the ssh key. This will only be present when the credential is an ssh key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizedCredentialTitle { get; set; }
#nullable restore
#else
        public string AuthorizedCredentialTitle { get; set; }
#endif
        /// <summary>Date when the credential was last accessed. May be null if it was never accessed</summary>
        public DateTimeOffset? CredentialAccessedAt { get; set; }
        /// <summary>Date when the credential was authorized for use.</summary>
        public DateTimeOffset? CredentialAuthorizedAt { get; set; }
        /// <summary>Unique identifier for the authorization of the credential. Use this to revoke authorization of the underlying token or key.</summary>
        public int? CredentialId { get; set; }
        /// <summary>Human-readable description of the credential type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CredentialType { get; set; }
#nullable restore
#else
        public string CredentialType { get; set; }
#endif
        /// <summary>Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>User login that owns the underlying credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Login { get; set; }
#nullable restore
#else
        public string Login { get; set; }
#endif
        /// <summary>List of oauth scopes the token has been granted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Scopes { get; set; }
#nullable restore
#else
        public List<string> Scopes { get; set; }
#endif
        /// <summary>Last eight characters of the credential. Only included in responses with credential_type of personal access token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenLastEight { get; set; }
#nullable restore
#else
        public string TokenLastEight { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CredentialAuthorization"/> and sets the default values.
        /// </summary>
        public CredentialAuthorization()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CredentialAuthorization"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CredentialAuthorization CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CredentialAuthorization();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authorized_credential_expires_at", n => { AuthorizedCredentialExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "authorized_credential_id", n => { AuthorizedCredentialId = n.GetIntValue(); } },
                { "authorized_credential_note", n => { AuthorizedCredentialNote = n.GetStringValue(); } },
                { "authorized_credential_title", n => { AuthorizedCredentialTitle = n.GetStringValue(); } },
                { "credential_accessed_at", n => { CredentialAccessedAt = n.GetDateTimeOffsetValue(); } },
                { "credential_authorized_at", n => { CredentialAuthorizedAt = n.GetDateTimeOffsetValue(); } },
                { "credential_id", n => { CredentialId = n.GetIntValue(); } },
                { "credential_type", n => { CredentialType = n.GetStringValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "login", n => { Login = n.GetStringValue(); } },
                { "scopes", n => { Scopes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "token_last_eight", n => { TokenLastEight = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("authorized_credential_expires_at", AuthorizedCredentialExpiresAt);
            writer.WriteIntValue("authorized_credential_id", AuthorizedCredentialId);
            writer.WriteStringValue("authorized_credential_note", AuthorizedCredentialNote);
            writer.WriteStringValue("authorized_credential_title", AuthorizedCredentialTitle);
            writer.WriteDateTimeOffsetValue("credential_accessed_at", CredentialAccessedAt);
            writer.WriteDateTimeOffsetValue("credential_authorized_at", CredentialAuthorizedAt);
            writer.WriteIntValue("credential_id", CredentialId);
            writer.WriteStringValue("credential_type", CredentialType);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("login", Login);
            writer.WriteCollectionOfPrimitiveValues<string>("scopes", Scopes);
            writer.WriteStringValue("token_last_eight", TokenLastEight);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    /// <summary>
    /// A GitHub Classroom accepted assignment
    /// </summary>
    public class ClassroomAcceptedAssignment : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A GitHub Classroom assignment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SimpleClassroomAssignment? Assignment { get; set; }
#nullable restore
#else
        public SimpleClassroomAssignment Assignment { get; set; }
#endif
        /// <summary>Count of student commits.</summary>
        public int? CommitCount { get; set; }
        /// <summary>Most recent grade.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Grade { get; set; }
#nullable restore
#else
        public string Grade { get; set; }
#endif
        /// <summary>Unique identifier of the repository.</summary>
        public int? Id { get; set; }
        /// <summary>Whether a submission passed.</summary>
        public bool? Passing { get; set; }
        /// <summary>A GitHub repository view for Classroom</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SimpleClassroomRepository? Repository { get; set; }
#nullable restore
#else
        public SimpleClassroomRepository Repository { get; set; }
#endif
        /// <summary>The students property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SimpleClassroomUser>? Students { get; set; }
#nullable restore
#else
        public List<SimpleClassroomUser> Students { get; set; }
#endif
        /// <summary>Whether an accepted assignment has been submitted.</summary>
        public bool? Submitted { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ClassroomAcceptedAssignment"/> and sets the default values.
        /// </summary>
        public ClassroomAcceptedAssignment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ClassroomAcceptedAssignment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ClassroomAcceptedAssignment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ClassroomAcceptedAssignment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"assignment", n => { Assignment = n.GetObjectValue<SimpleClassroomAssignment>(SimpleClassroomAssignment.CreateFromDiscriminatorValue); } },
                {"commit_count", n => { CommitCount = n.GetIntValue(); } },
                {"grade", n => { Grade = n.GetStringValue(); } },
                {"id", n => { Id = n.GetIntValue(); } },
                {"passing", n => { Passing = n.GetBoolValue(); } },
                {"repository", n => { Repository = n.GetObjectValue<SimpleClassroomRepository>(SimpleClassroomRepository.CreateFromDiscriminatorValue); } },
                {"students", n => { Students = n.GetCollectionOfObjectValues<SimpleClassroomUser>(SimpleClassroomUser.CreateFromDiscriminatorValue)?.ToList(); } },
                {"submitted", n => { Submitted = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<SimpleClassroomAssignment>("assignment", Assignment);
            writer.WriteIntValue("commit_count", CommitCount);
            writer.WriteStringValue("grade", Grade);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("passing", Passing);
            writer.WriteObjectValue<SimpleClassroomRepository>("repository", Repository);
            writer.WriteCollectionOfObjectValues<SimpleClassroomUser>("students", Students);
            writer.WriteBoolValue("submitted", Submitted);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

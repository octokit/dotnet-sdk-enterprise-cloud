// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    #pragma warning disable CS1591
    public class AdvancedSecurityActiveCommitters : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The total number of GitHub Advanced Security licences required if all repositories were to enable GitHub Advanced Security</summary>
        public int? MaximumAdvancedSecurityCommitters { get; set; }
        /// <summary>The total number of GitHub Advanced Security licences purchased</summary>
        public int? PurchasedAdvancedSecurityCommitters { get; set; }
        /// <summary>The repositories property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AdvancedSecurityActiveCommittersRepository>? Repositories { get; set; }
#nullable restore
#else
        public List<AdvancedSecurityActiveCommittersRepository> Repositories { get; set; }
#endif
        /// <summary>The total_advanced_security_committers property</summary>
        public int? TotalAdvancedSecurityCommitters { get; set; }
        /// <summary>The total_count property</summary>
        public int? TotalCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="AdvancedSecurityActiveCommitters"/> and sets the default values.
        /// </summary>
        public AdvancedSecurityActiveCommitters()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AdvancedSecurityActiveCommitters"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AdvancedSecurityActiveCommitters CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AdvancedSecurityActiveCommitters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"maximum_advanced_security_committers", n => { MaximumAdvancedSecurityCommitters = n.GetIntValue(); } },
                {"purchased_advanced_security_committers", n => { PurchasedAdvancedSecurityCommitters = n.GetIntValue(); } },
                {"repositories", n => { Repositories = n.GetCollectionOfObjectValues<AdvancedSecurityActiveCommittersRepository>(AdvancedSecurityActiveCommittersRepository.CreateFromDiscriminatorValue)?.ToList(); } },
                {"total_advanced_security_committers", n => { TotalAdvancedSecurityCommitters = n.GetIntValue(); } },
                {"total_count", n => { TotalCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("maximum_advanced_security_committers", MaximumAdvancedSecurityCommitters);
            writer.WriteIntValue("purchased_advanced_security_committers", PurchasedAdvancedSecurityCommitters);
            writer.WriteCollectionOfObjectValues<AdvancedSecurityActiveCommittersRepository>("repositories", Repositories);
            writer.WriteIntValue("total_advanced_security_committers", TotalAdvancedSecurityCommitters);
            writer.WriteIntValue("total_count", TotalCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

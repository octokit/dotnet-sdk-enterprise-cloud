// <auto-generated/>
using GitHub.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Applications.Item.Token.Scoped {
    #pragma warning disable CS1591
    public class ScopedPostRequestBody : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The access token used to authenticate to the GitHub API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessToken { get; set; }
#nullable restore
#else
        public string AccessToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The permissions granted to the user access token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AppPermissions? Permissions { get; set; }
#nullable restore
#else
        public AppPermissions Permissions { get; set; }
#endif
        /// <summary>The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Repositories { get; set; }
#nullable restore
#else
        public List<string> Repositories { get; set; }
#endif
        /// <summary>The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? RepositoryIds { get; set; }
#nullable restore
#else
        public List<int?> RepositoryIds { get; set; }
#endif
        /// <summary>The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Target { get; set; }
#nullable restore
#else
        public string Target { get; set; }
#endif
        /// <summary>The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.</summary>
        public int? TargetId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ScopedPostRequestBody"/> and sets the default values.
        /// </summary>
        public ScopedPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ScopedPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ScopedPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ScopedPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"access_token", n => { AccessToken = n.GetStringValue(); } },
                {"permissions", n => { Permissions = n.GetObjectValue<AppPermissions>(AppPermissions.CreateFromDiscriminatorValue); } },
                {"repositories", n => { Repositories = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"repository_ids", n => { RepositoryIds = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"target", n => { Target = n.GetStringValue(); } },
                {"target_id", n => { TargetId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("access_token", AccessToken);
            writer.WriteObjectValue<AppPermissions>("permissions", Permissions);
            writer.WriteCollectionOfPrimitiveValues<string>("repositories", Repositories);
            writer.WriteCollectionOfPrimitiveValues<int?>("repository_ids", RepositoryIds);
            writer.WriteStringValue("target", Target);
            writer.WriteIntValue("target_id", TargetId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

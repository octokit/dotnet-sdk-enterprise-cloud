// <auto-generated/>
using GitHub.Enterprises.Item.Actions;
using GitHub.Enterprises.Item.Announcement;
using GitHub.Enterprises.Item.AuditLog;
using GitHub.Enterprises.Item.CodeScanning;
using GitHub.Enterprises.Item.Code_security_and_analysis;
using GitHub.Enterprises.Item.ConsumedLicenses;
using GitHub.Enterprises.Item.Copilot;
using GitHub.Enterprises.Item.Dependabot;
using GitHub.Enterprises.Item.Item;
using GitHub.Enterprises.Item.LicenseSyncStatus;
using GitHub.Enterprises.Item.SecretScanning;
using GitHub.Enterprises.Item.Settings;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace GitHub.Enterprises.Item {
    /// <summary>
    /// Builds and executes requests for operations under \enterprises\{enterprise}
    /// </summary>
    public class WithEnterpriseItemRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The actions property</summary>
        public ActionsRequestBuilder Actions
        {
            get => new ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The announcement property</summary>
        public AnnouncementRequestBuilder Announcement
        {
            get => new AnnouncementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The auditLog property</summary>
        public AuditLogRequestBuilder AuditLog
        {
            get => new AuditLogRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The code_security_and_analysis property</summary>
        public Code_security_and_analysisRequestBuilder Code_security_and_analysis
        {
            get => new Code_security_and_analysisRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The codeScanning property</summary>
        public CodeScanningRequestBuilder CodeScanning
        {
            get => new CodeScanningRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The consumedLicenses property</summary>
        public ConsumedLicensesRequestBuilder ConsumedLicenses
        {
            get => new ConsumedLicensesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The copilot property</summary>
        public CopilotRequestBuilder Copilot
        {
            get => new CopilotRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dependabot property</summary>
        public DependabotRequestBuilder Dependabot
        {
            get => new DependabotRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The licenseSyncStatus property</summary>
        public LicenseSyncStatusRequestBuilder LicenseSyncStatus
        {
            get => new LicenseSyncStatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The secretScanning property</summary>
        public SecretScanningRequestBuilder SecretScanning
        {
            get => new SecretScanningRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public SettingsRequestBuilder Settings
        {
            get => new SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the GitHub.enterprises.item.item collection</summary>
        /// <param name="position">The security feature to enable or disable.</param>
        /// <returns>A <see cref="WithSecurity_productItemRequestBuilder"/></returns>
        public WithSecurity_productItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("security_product", position);
                return new WithSecurity_productItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="WithEnterpriseItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithEnterpriseItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/enterprises/{enterprise}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithEnterpriseItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithEnterpriseItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/enterprises/{enterprise}", rawUrl)
        {
        }
    }
}

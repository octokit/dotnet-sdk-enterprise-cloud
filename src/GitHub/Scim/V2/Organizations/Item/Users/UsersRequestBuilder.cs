// <auto-generated/>
#pragma warning disable CS0618
using GitHub.Models;
using GitHub.Scim.V2.Organizations.Item.Users.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace GitHub.Scim.V2.Organizations.Item.Users
{
    /// <summary>
    /// Builds and executes requests for operations under \scim\v2\organizations\{org}\Users
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class UsersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the GitHub.scim.v2.organizations.item.Users.item collection</summary>
        /// <param name="position">The unique identifier of the SCIM user.</param>
        /// <returns>A <see cref="global::GitHub.Scim.V2.Organizations.Item.Users.Item.WithScim_user_ItemRequestBuilder"/></returns>
        public global::GitHub.Scim.V2.Organizations.Item.Users.Item.WithScim_user_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("scim_user_id", position);
                return new global::GitHub.Scim.V2.Organizations.Item.Users.Item.WithScim_user_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/scim/v2/organizations/{org}/Users{?count*,filter*,startIndex*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/scim/v2/organizations/{org}/Users{?count*,filter*,startIndex*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account&apos;s metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Cloud. This can happen in certain cases where an external identity associated with an organization will not match an organization member:  - When a user with a SCIM-provisioned external identity is removed from an organization, the account&apos;s metadata is preserved to allow the user to re-join the organization in the future.  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).  - When a user is invited over SCIM, an external identity is created that matches with the invitee&apos;s email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Cloud account after completing SSO:1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Cloud organization.1. The user attempts to access the GitHub Enterprise Cloud organization and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Cloud account.1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Cloud account:   - If the user signs in, their GitHub Enterprise Cloud account is linked to this entry.   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Cloud organization, and the external identity `null` entry remains in place.
        /// API method documentation <see href="https://docs.github.com/enterprise-cloud@latest//rest/scim/scim#list-scim-provisioned-identities" />
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.ScimUserList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 400 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 403 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 404 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::GitHub.Models.ScimUserList?> GetAsync(Action<RequestConfiguration<global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::GitHub.Models.ScimUserList> GetAsync(Action<RequestConfiguration<global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "403", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "404", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "429", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::GitHub.Models.ScimUserList>(requestInfo, global::GitHub.Models.ScimUserList.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Provisions organization membership for a user, and sends an activation email to the email address. If the user was previously a member of the organization, the invitation will reinstate any former privileges that the user had. For more information about reinstating former members, see &quot;[Reinstating a former member of your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-membership-in-your-organization/reinstating-a-former-member-of-your-organization).&quot;
        /// API method documentation <see href="https://docs.github.com/enterprise-cloud@latest//rest/scim/scim#provision-and-invite-a-scim-user" />
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.ScimUser"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 400 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 403 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 404 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 409 status code</exception>
        /// <exception cref="global::GitHub.Models.ScimError">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::GitHub.Models.ScimUser?> PostAsync(global::GitHub.Scim.V2.Organizations.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::GitHub.Models.ScimUser> PostAsync(global::GitHub.Scim.V2.Organizations.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "403", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "404", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "409", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
                { "500", global::GitHub.Models.ScimError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::GitHub.Models.ScimUser>(requestInfo, global::GitHub.Models.ScimUser.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account&apos;s metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Cloud. This can happen in certain cases where an external identity associated with an organization will not match an organization member:  - When a user with a SCIM-provisioned external identity is removed from an organization, the account&apos;s metadata is preserved to allow the user to re-join the organization in the future.  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).  - When a user is invited over SCIM, an external identity is created that matches with the invitee&apos;s email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Cloud account after completing SSO:1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Cloud organization.1. The user attempts to access the GitHub Enterprise Cloud organization and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Cloud account.1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Cloud account:   - If the user signs in, their GitHub Enterprise Cloud account is linked to this entry.   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Cloud organization, and the external identity `null` entry remains in place.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/scim+json");
            return requestInfo;
        }
        /// <summary>
        /// Provisions organization membership for a user, and sends an activation email to the email address. If the user was previously a member of the organization, the invitation will reinstate any former privileges that the user had. For more information about reinstating former members, see &quot;[Reinstating a former member of your organization](https://docs.github.com/enterprise-cloud@latest//organizations/managing-membership-in-your-organization/reinstating-a-former-member-of-your-organization).&quot;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::GitHub.Scim.V2.Organizations.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::GitHub.Scim.V2.Organizations.Item.Users.UsersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/scim+json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::GitHub.Scim.V2.Organizations.Item.Users.UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account&apos;s metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Cloud. This can happen in certain cases where an external identity associated with an organization will not match an organization member:  - When a user with a SCIM-provisioned external identity is removed from an organization, the account&apos;s metadata is preserved to allow the user to re-join the organization in the future.  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).  - When a user is invited over SCIM, an external identity is created that matches with the invitee&apos;s email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Cloud account after completing SSO:1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Cloud organization.1. The user attempts to access the GitHub Enterprise Cloud organization and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Cloud account.1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Cloud account:   - If the user signs in, their GitHub Enterprise Cloud account is linked to this entry.   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Cloud organization, and the external identity `null` entry remains in place.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class UsersRequestBuilderGetQueryParameters 
        {
            /// <summary>Used for pagination: the number of results to return.</summary>
            [QueryParameter("count")]
            public int? Count { get; set; }
            /// <summary>Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `externalId`. For example, to search for an identity with the `userName` Octocat, you would use this query:`?filter=userName%20eq%20\&quot;Octocat\&quot;`.To filter results for the identity with the email `octocat@github.com`, you would use this query:`?filter=emails%20eq%20\&quot;octocat@github.com\&quot;`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            /// <summary>Used for pagination: the index of the first result to return.</summary>
            [QueryParameter("startIndex")]
            public int? StartIndex { get; set; }
        }
    }
}
#pragma warning restore CS0618
